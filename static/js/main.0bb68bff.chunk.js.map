{"version":3,"sources":["components/Todoform.js","components/Todo.js","components/Todolist.js","App.js","serviceWorker.js","index.js"],"names":["Todoform","state","text","handleChange","event","setState","target","name","value","handlesubmit","preventDefault","props","onSubmit","id","shortid","generate","complete","this","onChange","placeholder","onClick","Component","style","display","justifyContent","textDecoration","todo","toggleComplete","onDelete","Todolist","todos","todotoshow","toggleallcomp","addTodo","newTodos","removeall","filter","map","Updateto","s","del","Todo","key","length","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iSAEqBA,E,4MACnBC,MAAQ,CACNC,KAAM,I,EAGRC,aAAe,SAACC,GACd,EAAKC,SAAL,eACGD,EAAME,OAAOC,KAAOH,EAAME,OAAOE,S,EAItCC,aAAe,SAACL,GACdA,EAAMM,iBACN,EAAKC,MAAMC,SAAS,CAClBC,GAAIC,IAAQC,WACZb,KAAM,EAAKD,MAAMC,KACjBc,UAAU,IAEZ,EAAKX,SAAS,CACZH,KAAM,M,uDAKR,OACE,0BAAMW,GAAG,OAAOD,SAAUK,KAAKR,cAC7B,2BACEF,KAAK,OACLC,MAAOS,KAAKhB,MAAMC,KAClBgB,SAAUD,KAAKd,aACfgB,YAAY,WAGd,4BAAQC,QAASH,KAAKR,cAAtB,Y,GAjC8BY,aCAvB,WAACV,GAAD,OACb,yBAAKE,GAAG,OAAOS,MAAO,CAAEC,QAAS,OAAQC,eAAgB,WACvD,yBACEF,MAAO,CACLG,eAAgBd,EAAMe,KAAKV,SAAW,eAAiB,IAEzDI,QAAST,EAAMgB,gBAEf,uBAAGd,GAAG,OAAOF,EAAMe,KAAKxB,OAE1B,4BAAQW,GAAG,KAAKO,QAAST,EAAMiB,UAA/B,YCRiBC,E,4MACnB5B,MAAQ,CACN6B,MAAO,GACPC,WAAY,MACZC,eAAe,G,EAEjBC,QAAU,SAACP,GACT,IAAMQ,EAAQ,CAAIR,GAAJ,mBAAa,EAAKzB,MAAM6B,QACtC,EAAKzB,SAAS,CACZyB,MAAOI,K,EAGXC,UAAY,WACV,EAAK9B,SAAS,CACZyB,MAAO,EAAK7B,MAAM6B,MAAMM,QAAO,SAACV,GAAD,OAAWA,EAAKV,e,EAGnDW,eAAiB,SAACd,GAChB,EAAKR,SAAS,CACZyB,MAAO,EAAK7B,MAAM6B,MAAMO,KAAI,SAACX,GAC3B,OAAIA,EAAKb,KAAOA,EACP,CAELA,GAAIa,EAAKb,GACTX,KAAMwB,EAAKxB,KACXc,UAAWU,EAAKV,UAGXU,Q,EAKfY,SAAW,SAACC,GACV,EAAKlC,SAAS,CACZ0B,WAAYQ,K,EAGhBC,IAAM,SAAC3B,GACL,EAAKR,SAAS,CACZyB,MAAO,EAAK7B,MAAM6B,MAAMM,QAAO,SAACV,GAAD,OAAUA,EAAKb,KAAOA,Q,uDAG/C,IAAD,OACHiB,EAAQ,GASZ,MAR8B,QAA1Bb,KAAKhB,MAAM8B,WACbD,EAAQb,KAAKhB,MAAM6B,MACgB,WAA1Bb,KAAKhB,MAAM8B,WACpBD,EAAQb,KAAKhB,MAAM6B,MAAMM,QAAO,SAACV,GAAD,OAAWA,EAAKV,YACb,aAA1BC,KAAKhB,MAAM8B,aACpBD,EAAQb,KAAKhB,MAAM6B,MAAMM,QAAO,SAACV,GAAD,OAAUA,EAAKV,aAI/C,6BACE,kBAAC,EAAD,CAAUJ,SAAUK,KAAKgB,UACxBH,EAAMO,KAAI,SAACX,GAAD,OACT,kBAACe,EAAD,CACEC,IAAKhB,EAAKb,GACVc,eAAgB,kBAAM,EAAKA,eAAeD,EAAKb,KAC/Ce,SAAU,kBAAM,EAAKY,IAAId,EAAKb,KAC9Ba,KAAMA,OAGV,yBAAKb,GAAG,OACN,4BADF,eACsB,IACnBI,KAAKhB,MAAM6B,MAAMM,QAAO,SAACV,GAAD,OAAWA,EAAKV,YAAU2B,QAErD,yBAAK9B,GAAG,OACN,4BAAQO,QAAS,kBAAM,EAAKkB,SAAS,SAArC,OADF,OAGE,4BAAQlB,QAAS,kBAAM,EAAKkB,SAAS,cAArC,aAHF,OAKE,4BAAQlB,QAAS,kBAAM,EAAKkB,SAAS,YAArC,cAEDrB,KAAKhB,MAAM6B,MAAMM,QAAO,SAACV,GAAD,OAAUA,EAAKV,YAAU2B,OAChD,6BACE,4BAAQ9B,GAAG,MAAMO,QAASH,KAAKkB,WAA/B,qBAIA,U,GAjF0Bd,aCgBvBuB,E,uKAVX,OACE,yBAAKC,UAAU,OACb,4BACA,yCACA,kBAAC,EAAD,W,GANUxB,aCIEyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0bb68bff.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport shortid from \"shortid\";\r\nexport default class Todoform extends Component {\r\n  state = {\r\n    text: \"\",\r\n  };\r\n\r\n  handleChange = (event) => {\r\n    this.setState({\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  };\r\n\r\n  handlesubmit = (event) => {\r\n    event.preventDefault();\r\n    this.props.onSubmit({\r\n      id: shortid.generate(),\r\n      text: this.state.text,\r\n      complete: false,\r\n    });\r\n    this.setState({\r\n      text: \"\",\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form id=\"todo\" onSubmit={this.handlesubmit}>\r\n        <input\r\n          name=\"text\"\r\n          value={this.state.text}\r\n          onChange={this.handleChange}\r\n          placeholder=\"todo..\"\r\n        />\r\n\r\n        <button onClick={this.handlesubmit}>Add</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\n//import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nexport default (props) => (\r\n  <div id=\"onee\" style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n    <div\r\n      style={{\r\n        textDecoration: props.todo.complete ? \"line-through\" : \"\",\r\n      }}\r\n      onClick={props.toggleComplete}\r\n    >\r\n      <p id=\"txt\">{props.todo.text}</p>\r\n    </div>\r\n    <button id=\"tr\" onClick={props.onDelete}>\r\n      Delete\r\n    </button>\r\n  </div>\r\n);\r\n","import React, { Component } from \"react\";\r\nimport Todoform from \"./Todoform\";\r\nimport Todo from \"./Todo\";\r\n\r\nexport default class Todolist extends Component {\r\n  state = {\r\n    todos: [],\r\n    todotoshow: \"all\",\r\n    toggleallcomp: true,\r\n  };\r\n  addTodo = (todo) => {\r\n    const newTodos = [todo, ...this.state.todos];\r\n    this.setState({\r\n      todos: newTodos,\r\n    });\r\n  };\r\n  removeall = () => {\r\n    this.setState({\r\n      todos: this.state.todos.filter((todo) => !todo.complete),\r\n    });\r\n  };\r\n  toggleComplete = (id) => {\r\n    this.setState({\r\n      todos: this.state.todos.map((todo) => {\r\n        if (todo.id === id) {\r\n          return {\r\n            //to update, keep the id and text same\r\n            id: todo.id,\r\n            text: todo.text,\r\n            complete: !todo.complete,\r\n          };\r\n        } else {\r\n          return todo;\r\n        }\r\n      }),\r\n    });\r\n  };\r\n  Updateto = (s) => {\r\n    this.setState({\r\n      todotoshow: s,\r\n    });\r\n  };\r\n  del = (id) => {\r\n    this.setState({\r\n      todos: this.state.todos.filter((todo) => todo.id !== id),\r\n    });\r\n  };\r\n  render() {\r\n    let todos = [];\r\n    if (this.state.todotoshow === \"all\") {\r\n      todos = this.state.todos;\r\n    } else if (this.state.todotoshow === \"active\") {\r\n      todos = this.state.todos.filter((todo) => !todo.complete);\r\n    } else if (this.state.todotoshow === \"complete\") {\r\n      todos = this.state.todos.filter((todo) => todo.complete);\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <Todoform onSubmit={this.addTodo} />\r\n        {todos.map((todo) => (\r\n          <Todo\r\n            key={todo.id}\r\n            toggleComplete={() => this.toggleComplete(todo.id)}\r\n            onDelete={() => this.del(todo.id)}\r\n            todo={todo}\r\n          ></Todo>\r\n        ))}\r\n        <div id=\"act\">\r\n          <p></p>Active todo:{\" \"}\r\n          {this.state.todos.filter((todo) => !todo.complete).length}\r\n        </div>\r\n        <div id=\"btn\">\r\n          <button onClick={() => this.Updateto(\"all\")}>All</button>\r\n          &nbsp;\r\n          <button onClick={() => this.Updateto(\"complete\")}>Completed</button>\r\n          &nbsp;\r\n          <button onClick={() => this.Updateto(\"active\")}>Yet to do</button>\r\n        </div>\r\n        {this.state.todos.filter((todo) => todo.complete).length ? (\r\n          <div>\r\n            <button id=\"rem\" onClick={this.removeall}>\r\n              Remove Completed\r\n            </button>\r\n          </div>\r\n        ) : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\n//import logo from './logo.svg';\nimport \"./App.css\";\nimport Todolist from \"./components/Todolist\";\n//import { library } from \"@fortawesome/fontawesome-svg-core\";\n//import { faTrash } from \"@fortawesome/free-solid-svg-icons\";\n\n//library.add(faTrash);\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <p></p>\n        <p>To-do List</p>\n        <Todolist />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}